---
// Theme Switcher Component with Multiple Options
---

<div class="theme-switcher">
  <button id="theme-switcher-btn" class="theme-switcher-btn">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="12" cy="12" r="5"></circle>
      <path d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"></path>
    </svg>
    <span class="ml-2 hidden md:inline">Theme</span>
  </button>
  
  <div id="theme-dropdown" class="theme-dropdown">
    <div class="theme-option" data-theme="light">
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="5"></circle>
        <path d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"></path>
      </svg>
      <span>Light</span>
    </div>
    
    <div class="theme-option" data-theme="dark">
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
      </svg>
      <span>Dark</span>
    </div>
    
    <div class="theme-option" data-theme="sepia">
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M8 3h8l4 8-4 8H8l-4-8 4-8z"></path>
      </svg>
      <span>Sepia</span>
    </div>
    
    <div class="theme-option" data-theme="system">
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
        <line x1="8" y1="21" x2="16" y2="21"></line>
        <line x1="12" y1="17" x2="12" y2="21"></line>
      </svg>
      <span>System</span>
    </div>
  </div>
</div>

<style>
  .theme-switcher {
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 50;
  }
  
  .theme-switcher-btn {
    display: flex;
    align-items: center;
    padding: 10px 16px;
    background-color: white;
    color: #111827;
    //border: 1px solid #e5e7eb;
    border-radius: 9999px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    font-size: 14px;
    font-weight: 500;
  }
  
  .theme-switcher-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
  }
  
  :global(.dark) .theme-switcher-btn {
    background-color: #1f2937;
    color: #f9fafb;
    border-color: #374151;
  }
  
  .theme-dropdown {
    position: absolute;
    bottom: 100%;
    left: 0;
    margin-bottom: 8px;
    background-color: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
    width: 160px;
    opacity: 0;
    transform: translateY(10px);
    pointer-events: none;
    transition: all 0.2s ease;
    overflow: hidden;
  }
  
  :global(.dark) .theme-dropdown {
    background-color: #1f2937;
    //border-color: #374151;
  }
  
  .theme-dropdown.show {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
  }
  
  .theme-option {
    display: flex;
    align-items: center;
    padding: 10px 16px;
    cursor: pointer;
    transition: background-color 0.2s;
    color: #4b5563;
  }
  
  :global(.dark) .theme-option {
    color: #d1d5db;
  }
  
  .theme-option:hover {
    background-color: #f3f4f6;
  }
  
  :global(.dark) .theme-option:hover {
    background-color: #374151;
  }
  
  .theme-option.active {
    background-color: #f3f4f6;
    color: #111827;
    font-weight: 500;
  }
  
  :global(.dark) .theme-option.active {
    background-color: #374151;
    color: #f9fafb;
  }
  
  .theme-option svg {
    margin-right: 12px;
  }
  
  /* Sepia theme styles */
  :global(.sepia) {
    background-color: #f8f4e5;
    color: #5f4b32;
  }
  
  :global(.sepia) .theme-switcher-btn,
  :global(.sepia) .theme-dropdown {
    background-color: #f8f4e5;
    //border-color: #e8d8c3;
    color: #5f4b32;
  }
  
  :global(.sepia) .theme-option:hover {
    background-color: #f0e6d2;
  }
  
  :global(.sepia) .theme-option.active {
    background-color: #f0e6d2;
    color: #5f4b32;
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    const themeBtn = document.getElementById('theme-switcher-btn');
    const dropdown = document.getElementById('theme-dropdown');
    const themeOptions = document.querySelectorAll('.theme-option');
    const html = document.documentElement;
    
    // Function to set theme
    function setTheme(theme) {
      // Remove all theme classes
      html.classList.remove('dark', 'sepia');
      
      // Add appropriate class based on theme
      if (theme === 'dark') {
        html.classList.add('dark');
      } else if (theme === 'sepia') {
        html.classList.add('sepia');
      } else if (theme === 'system') {
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          html.classList.add('dark');
        }
      }
      
      // Save theme preference
      localStorage.setItem('theme', theme);
      
      // Update active state in dropdown
      themeOptions.forEach(option => {
        if (option.getAttribute('data-theme') === theme) {
          option.classList.add('active');
        } else {
          option.classList.remove('active');
        }
      });
    }
    
    // Toggle dropdown
    if (themeBtn) {
      themeBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        dropdown.classList.toggle('show');
      });
    }
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function() {
      dropdown.classList.remove('show');
    });
    
    // Prevent dropdown from closing when clicking inside it
    dropdown.addEventListener('click', function(e) {
      e.stopPropagation();
    });
    
    // Handle theme option clicks
    themeOptions.forEach(option => {
      option.addEventListener('click', function() {
        const theme = this.getAttribute('data-theme');
        setTheme(theme);
        dropdown.classList.remove('show');
      });
    });
    
    // Initialize theme
    const savedTheme = localStorage.getItem('theme') || 'light';
    setTheme(savedTheme);
    
    // Listen for system theme changes if using system theme
    if (window.matchMedia && localStorage.getItem('theme') === 'system') {
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function(e) {
        if (e.matches) {
          html.classList.add('dark');
        } else {
          html.classList.remove('dark');
        }
      });
    }
  });
</script> 