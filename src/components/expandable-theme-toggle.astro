---
// Expandable Theme Toggle Component
---

<div class="expandable-theme-toggle">
  <button id="theme-toggle-main" class="theme-toggle-btn" aria-label="Toggle theme">
    <div class="icon-container">
      <svg class="sun-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="5"></circle>
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
      </svg>
      <svg class="moon-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
      </svg>
    </div>
  </button>
  
  <div class="theme-options">
    <button class="theme-option" data-theme="light" aria-label="Light theme">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="5"></circle>
      </svg>
      <span>Light</span>
    </button>
    
    <button class="theme-option" data-theme="dark" aria-label="Dark theme">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
      </svg>
      <span>Dark</span>
    </button>
    
    <button class="theme-option" data-theme="system" aria-label="System theme">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
      </svg>
      <span>System</span>
    </button>
  </div>
</div>

<style>
  .expandable-theme-toggle {
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 50;
    display: flex;
    align-items: center;
  }
  
  .theme-toggle-btn {
    width: 40px;
    height: 40px;
    border-radius: 20px;
    background-color: white;
    color: #111827;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 2;
  }
  
  .theme-toggle-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
  }
  
  :global(.dark) .theme-toggle-btn {
    background-color: #1f2937;
    color: #f9fafb;
  }
  
  .icon-container {
    position: relative;
    width: 20px;
    height: 20px;
  }
  
  .sun-icon, .moon-icon {
    position: absolute;
    top: 0;
    left: 0;
    transition: transform 0.5s ease, opacity 0.5s ease;
  }
  
  .sun-icon {
    opacity: 1;
    transform: rotate(0deg);
  }
  
  .moon-icon {
    opacity: 0;
    transform: rotate(90deg);
  }
  
  :global(.dark) .sun-icon {
    opacity: 0;
    transform: rotate(-90deg);
  }
  
  :global(.dark) .moon-icon {
    opacity: 1;
    transform: rotate(0deg);
  }
  
  .theme-options {
    display: flex;
    height: 40px;
    background-color: white;
    border-radius: 20px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    margin-left: 8px;
    opacity: 0;
    transform: scaleX(0);
    transform-origin: left;
    transition: all 0.3s ease;
    overflow: hidden;
  }
  
  :global(.dark) .theme-options {
    background-color: #1f2937;
  }
  
  .expandable-theme-toggle:hover .theme-options {
    opacity: 1;
    transform: scaleX(1);
  }
  
  .theme-option {
    display: flex;
    align-items: center;
    padding: 0 12px;
    height: 100%;
    background: transparent;
    border: none;
    cursor: pointer;
    color: #4b5563;
    font-size: 13px;
    transition: all 0.2s ease;
    white-space: nowrap;
  }
  
  .theme-option:hover {
    color: #111827;
    background-color: rgba(0, 0, 0, 0.05);
  }
  
  :global(.dark) .theme-option {
    color: #9ca3af;
  }
  
  :global(.dark) .theme-option:hover {
    color: #f9fafb;
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  .theme-option.active {
    color: #111827;
    font-weight: 500;
    background-color: rgba(0, 0, 0, 0.05);
  }
  
  :global(.dark) .theme-option.active {
    color: #f9fafb;
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  .theme-option svg {
    margin-right: 6px;
  }
  
  /* Responsive adjustments */
  @media (max-width: 640px) {
    .theme-option {
      padding: 0 8px;
    }
    
    .theme-option span {
      font-size: 12px;
    }
    
    .theme-option svg {
      margin-right: 4px;
    }
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    const themeToggleMain = document.getElementById('theme-toggle-main');
    const themeOptions = document.querySelectorAll('.theme-option');
    const html = document.documentElement;
    
    // Function to set theme
    function setTheme(theme) {
      // Remove all theme classes
      html.classList.remove('dark');
      
      // Add appropriate class based on theme
      if (theme === 'dark') {
        html.classList.add('dark');
      } else if (theme === 'system') {
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          html.classList.add('dark');
        }
      }
      
      // Save theme preference
      localStorage.setItem('theme', theme);
      
      // Update active state
      themeOptions.forEach(option => {
        if (option.getAttribute('data-theme') === theme) {
          option.classList.add('active');
        } else {
          option.classList.remove('active');
        }
      });
    }
    
    // Toggle between light and dark on main button click
    if (themeToggleMain) {
      themeToggleMain.addEventListener('click', function() {
        const currentTheme = localStorage.getItem('theme') || 'light';
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        setTheme(newTheme);
      });
    }
    
    // Handle theme option clicks
    themeOptions.forEach(option => {
      option.addEventListener('click', function(e) {
        e.stopPropagation(); // Prevent triggering the main toggle
        const theme = this.getAttribute('data-theme');
        setTheme(theme);
      });
    });
    
    // Initialize theme
    const savedTheme = localStorage.getItem('theme') || 'light';
    setTheme(savedTheme);
    
    // Listen for system theme changes if using system theme
    if (window.matchMedia && localStorage.getItem('theme') === 'system') {
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function(e) {
        if (localStorage.getItem('theme') === 'system') {
          if (e.matches) {
            html.classList.add('dark');
          } else {
            html.classList.remove('dark');
          }
        }
      });
    }
  });
</script> 